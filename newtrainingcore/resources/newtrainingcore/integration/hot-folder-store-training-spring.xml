<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:file="http://www.springframework.org/schema/integration/file"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/integration 
						http://www.springframework.org/schema/integration/spring-integration.xsd 
						http://www.springframework.org/schema/integration/file 
						http://www.springframework.org/schema/integration/file/spring-integration-file.xsd
						http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context
           				http://www.springframework.org/schema/context/spring-context.xsd">
		
    <context:annotation-config/> 
    
   <bean id="baseDirectoryTraining" class="java.lang.String">
		<constructor-arg value="#{baseDirectory}/${tenantId}/training" />
	</bean>
	
	<!-- 1) Scan for files -->
	<file:inbound-channel-adapter id="batchFilesElectronics" directory="#{baseDirectoryTraining}"
							filename-regex="^(.*)-(\d+)\.csv" comparator="fileOrderComparator">
		<int:poller fixed-rate="1000" />
	</file:inbound-channel-adapter>
	
	<!-- 2) move the file to processing and setup header -->
	<file:outbound-gateway request-channel="batchFilesTraining" reply-channel="batchFilesTrainingProc"
			directory="#{baseDirectoryTraining}/processing" delete-source-files="true" />
	<int:service-activator input-channel="batchFilesTrainingProc" output-channel="batchFilesHeaderInit"
			ref="trainingHeaderSetupTask" method="execute" />
	<bean id="trainingHeaderSetupTask" class="de.hybris.platform.acceleratorservices.dataimport.batch.task.HeaderSetupTask">
		<property name="catalog" value="electronicsProductCatalog" />
		<property name="net" value="false" />
		<property name="storeBaseDirectory" ref="baseDirectoryElectronics" />
	</bean>
	
	<!-- Transformer converters mappings -->
	<bean id="trainingProductConverterMapping" 
		  class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.mapping.impl.DefaultConverterMapping" 
		  p:mapping="product" 
		  p:converter-ref="trainingProductConverter"/>
	
	<!-- Converters -->
	<bean id="trainingProductConverter" class="de.hybris.platform.acceleratorservices.dataimport.batch.converter.impl.DefaultImpexConverter">
		<property name="header">
			<value>#{productImpexHeader}
				INSERT_UPDATE Product;code[unique=true];$supercategories;manufacturerName;manufacturerAID;unit(code);ean;variantType(code);$catalogVersion;$approved
			</value>
		</property>
		<property name="impexRow">
			<value>;{+0};{1};{2};{3};{4};{5};{6};{7};{8}</value>
		</property>
	</bean>
	
	<bean id="productImpexHeader" class="java.lang.String">
		<constructor-arg>
		<value># ImpEx for importing data into $CATALOG$
			$productCatalog=electronicsProductCatalog
			$productCatalogName=Electronics Product Catalog
			$catalogVersion=catalogversion(catalog(id[default=$productCatalog]),version[default='Staged'])[unique=true,default=$productCatalog:Staged]
			$supercategories=supercategories(code, $catalogVersion)
			$baseProduct=baseProduct(code,$catalogVersion)
			$approved=approvalstatus(code)[default='check']
			
			
		</value>
		</constructor-arg>
	</bean>
</beans>